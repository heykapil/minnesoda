@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    @apply bg-white text-gray-900
    font-jetbrains font-light
    leading-6
    tracking-custom;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply my-1-h
    underline decoration-gray-300 underline-offset-5;
  }
  p {
    @apply mb-1-h overflow-x-auto sm:overflow-x-visible;
  }
  ul {
    @apply list-outside list-none ml-2-ex mb-1-h relative;
  }
  ol {
    @apply list-outside list-none ml-4-ex mb-1-h relative;
  }
  a {
    @apply text-accent cursor-pointer
    hover:underline
    hover:bg-accent/10;
  }
  hr {
    @apply border-gray-200 border-t my-1-h;
  }
  thead,
  tbody,
  th,
  tr,
  td {
    @apply border p-1;
  }
  th {
    @apply font-light bg-gray-50;
  }
}

@layer components {
  /* header left-side markers */
  .header {
    position: relative;
  }
  .header::before {
    position: absolute;
    left: -0.6rem;
    color: theme('colors.gray.200');
    opacity: 0;
  }
  h1::before {
    content: '#';
    font-size: 1.1rem;
    transform: translate(-100%, -0.14rem);
  }
  h2::before {
    content: '##';
    font-size: 0.9rem;
    transform: translate(-100%, 0.07rem);
  }
  h3::before {
    content: '###';
    font-size: 0.8rem;
    transform: translate(-100%, 0.14rem);
  }
  h4::before {
    content: '####';
    font-size: 0.7rem;
    transform: translate(-100%, 0.24rem);
  }
  h5::before {
    content: '#####';
    font-size: 0.6rem;
    transform: translate(-100%, 0.28rem);
  }
  h6::before {
    content: '######';
    font-size: 0.5rem;
    transform: translate(-100%, 0.37rem);
  }

  /* remove bottom margin for nested lists */
  li > ul,
  li > ol {
    margin-bottom: 0;
  }

  /* asterisks for bullet points */
  ul > li::before {
    color: theme('colors.gray.400');
    content: '*';
    position: absolute;
    transform: translateX(calc(-100% - 1ex));
  }

  /* custom counter for more control over ordered lists */
  ol {
    counter-reset: my_counter;
  }
  ol > li::before {
    color: theme('colors.gray.400');
    content: counter(my_counter);
    counter-increment: my_counter;
    position: absolute;
    transform: translateX(calc(-100% - 1ex));
  }
}
